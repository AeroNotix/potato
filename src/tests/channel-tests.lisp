(in-package :potato-tests)

(declaim (optimize (speed 0) (safety 3) (debug 3)))

(define-test create-new-channel-test (:contexts #'all-context :tags '(channel))
  (let* ((channel-name "Test channel")
         (user (potato.workflow:register-user "foo@foo.com" "Foo user" nil nil t))
         (domain (potato.core::load-private-domain-for-user user))
         (group (potato.core::create-group "Testgroup" domain :users (list user)))
         (channel (potato.core::create-channel channel-name group nil)))
    (let ((potato.core::*current-auth-user* user))
      (let ((loaded (potato.core:load-channel-with-check (potato.db:persisted-entry/couchdb-id channel) :if-not-joined :join)))
        (assert-equal channel-name (potato.core:channel/name loaded))))))

(define-test default-channel-for-user-test (:contexts #'all-context :tags '(channel))
  (let* ((user (potato.workflow:register-user "foo@foo.com" "Foo user" nil nil t))
         (domain (potato.core::load-private-domain-for-user user))
         (group (potato.core::find-default-group-in-domain domain))
         (channels (potato.core::find-channels-for-group group)))
    (assert-eql 1 (length channels))
    (let ((potato.core::*current-auth-user* user))
      (let ((loaded (potato.core:load-channel-with-check (potato.db:persisted-entry/couchdb-id (car channels))
                                                         :if-not-joined :join)))
        (assert-true (potato.core::user-is-in-channel-p loaded user))))))

#+nil(define-test add-messages-test (:contexts #'all-context :tags '(channel))
  (let* ((channel-name "Test channel")
         (user (potato.workflow:register-user "foo@foo.com" "Foo user" nil nil t))
         (group (potato.core::create-group "Testgroup" user))
         (channel (potato.core::create-channel channel-name group nil))
         (channel-id (potato.core:channel/id channel)))
    (let ((source (potato.core::find-channel-source channel-id :create t)))
      (assert-equal "" (html5-notification:find-current-id source))
      (let ((msg (potato.core:make-message channel-id (potato.core:user/id user) "Test message")))
        (potato.core:save-message msg)
        (setf (potato.core::channel-source/message source) nil)
        (let ((nid-1 (html5-notification:find-current-id source)))
          (assert-equal (potato.core:message/id msg) nid-1)
          (let ((msg2 (potato.core:make-message channel-id (potato.core:user/id user) "Test message2")))
            (potato.core:save-message msg2)
            (setf (potato.core::channel-source/message source) nil)
            (let ((nid-2 (html5-notification:find-current-id source)))
              (assert-equal (potato.core:message/id msg2) nid-2)
              (let ((updated (html5-notification:find-updated-objects source nid-1)))
                (assert-eql 1 (length updated))
                (assert-equal (potato.core:message/id msg2) (potato.core:message/id (first updated)))))))))))
